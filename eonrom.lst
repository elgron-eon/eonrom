####################### rom.asm
0000                  1	#
0000                  2	# rom.asm
0000                  3	#
0000                  4	# eon ROM
0000                  5	# (c) JCGV, junio del 2022
0000                  6	#
0000                  7	
0000                  8	#
0000                  9	# CONFIG
0000                 10	#
0000 = 0000.0010     11	KEYBUF_SIZE	.EQU	16
0000                 12	
0000                 13	# constants
0000 = 0000.0008     14	BS		.EQU	$08
0000 = 0000.007F     15	DEL		.EQU	$7f
0000 = 0000.0009     16	TAB		.EQU	$09
0000 = 0000.000A     17	LF		.EQU	$0a
0000 = 0000.000D     18	CR		.EQU	$0d
0000 = 0000.001B     19	ESC		.EQU	$1b
0000 = 0000.0008     20	MLINBYTES	.EQU	8
0000                 21	
0000                 22	# IRQs
0000 = 0000.0001     23	IRQ_RTC 	.EQU	$01
0000 = 0000.0004     24	IRQ_CON 	.EQU	$04
0000                 25	
0000                 26	# special registers
0000 = 0000.0004     27	REG_IRQ_MASK	.EQU	$04
0000 = 0000.0005     28	REG_IRQ_PC	.EQU	$05
0000 = 0000.0006     29	REG_IRQ_SCRATCH .EQU	$06
0000 = 0000.0007     30	REG_IRQ_SAVE	.EQU	$07
0000 = 0000.000C     31	REG_EXC_CODE	.EQU	$0c
0000 = 0000.000D     32	REG_EXC_PC	.EQU	$0d
0000 = 0000.000E     33	REG_EXC_SCRATCH .EQU	$0e
0000 = 0000.000F     34	REG_EXC_SAVE	.EQU	$0f
0000                 35	
0000                 36	# I/O devices
0000 = 0000.0000     37	CON_CTRL	.EQU	$00
0000 = 0000.0001     38	CON_DATA	.EQU	CON_CTRL + 1
0000 = 0000.0002     39	RTC_CTRL	.EQU	$02
0000 = 0000.0003     40	RTC_DATA	.EQU	RTC_CTRL + 1
0000 = 0000.0004     41	RTC_WRITE	.EQU	RTC_CTRL + 2
0000 = 0000.00FF     42	DEBUG_IO	.EQU	$FF
0000                 43	
0000                 44	#
0000                 45	# memory map
0000                 46	#
0000 = 0000.0000     47	ROM_START	.EQU	$00000
0000 = 0000.1000     48	RAM_START	.EQU	$01000
0000 = 0000.2000     49	IRQ_STACK	.EQU	$02000
0000 = 0000.1FE0     50	EXC_STACK	.EQU	IRQ_STACK - 32
0000 = 0000.1F60     51	SYS_STACK	.EQU	EXC_STACK - 128
0000 = 0002.0000     52	TOP_RAM 	.EQU	$20000
0000                 53	
0000                 54	#
0000                 55	# RAM area
0000                 56	#
0000                 57			.ORG	RAM_START
1000                 58	SYSVARS_START
1000 ? 0004     4    59	MMON_VALUE	.SPACE	4
1004                 60	
1004                 61	# serial buffer
1004 ? 0012    18    62	KEYBUF		.SPACE	KEYBUF_SIZE + 2
1016                 63	
1016                 64	# rtc date buffer
1016 ? 0008     8    65	DATE_IO 	.SPACE	8
101E ? 0001     1    66	DATE_READY	.SPACE	1
101F                 67	
101F                 68	# align end marker
101F ? 0001     1    69			.SPACE	 8 - ($$ % 8)
1020                 70	SYSVARS_END
1020                 71	
1020                 72	#
1020                 73	# BIOS
1020                 74	#
1020                 75			.ORG	ROM_START
0000                 76	
0000                 77	# RESET system, power on entry point
0000 80FF            78	RESET		LI	R0, 0
0002 0F090004        79			SET	REG_IRQ_MASK, R0
0006 30F91F60        80			LI	R0, SYS_STACK
000A 9FF0            81			MV	SP, R0
000C 30F90020        82			LI	R0, IRQ_HANDLER
0010 0F090005        83			SET	REG_IRQ_PC, R0
0014 30F902A8        84			LI	R0, EXC_HANDLER
0018 0F09000D        85			SET	REG_EXC_PC, R0
001C 2FF001B2        86			BRA	MONITOR
0020                 87	
0020                 88	# IRQ handler
0020 0F090006        89	IRQ_HANDLER	SET	REG_IRQ_SCRATCH, R0
0024 0F0D00001FD6    90			LEA	R0, IRQ_STACK
002A 110AFFFF        91			ST4	[R0 - 1], R1
002E 120AFFFE        92			ST4	[R0 - 2], R2
0032 130AFFFD        93			ST4	[R0 - 3], R3
0036 140AFFFC        94			ST4	[R0 - 4], R4
003A 150AFFFB        95			ST4	[R0 - 5], R5
003E 0F14            96			ISTAT	R1
0040 32180004        97			AND	R2, R1, IRQ_CON
0044 22F00015        98			BZ	R2, .NOCON
0048                 99	
0048                100			# key pressed
0048 34F91004       101			LI	R4, KEYBUF
004C 12400000       102			LD1	R2, [R4]	# head offset
0050 13400001       103			LD1	R3, [R4 + 1]	# tail offset
0054 33340001       104			ADD	R3, 1
0058 3338000F       105			AND	R3, KEYBUF_SIZE - 1
005C 23200009       106			BEQ	R3, R2, .NOCON	# buffer is full
0060                107	
0060 12400001       108			LD1	R2, [R4 + 1]	# get tail again
0064 13480001       109			ST1	[R4 + 1], R3	# store new tail
0068 4224           110			ADD	R2, R4
006A 04F8           111			LI	R4, CON_DATA
006C 044E           112			IN	R4, R4		# r4 = char
006E 14280002       113			ST1	[R2 + 2], R4	# store char
0072                114	
0072 32180001       115	.NOCON		AND	R2, R1, IRQ_RTC
0076 22F00015       116			BZ	R2, .DONE
007A 0F2D00000F96   117			LEA	R2, DATE_IO
0080 0F3DFFFFFF7D   118			LEA	R3, RTC_DATA
0086 0F4DFFFFFF7C   119			LEA	R4, 8
008C 053E           120	.RTCDUMP	IN	R5, R3
008E 15280000       121			ST1	[R2], R5
0092 32240001       122			ADD	R2, 1
0096 34450001       123			SUB	R4, 1
009A 24F1FFF7       124			BNZ	R4, .RTCDUMP
009E 04F8           125			LI	R4, 1
00A0 14280000       126			ST1	[R2], R4
00A4                127	
00A4 1104FFFF       128	.DONE		LD4	R1, [R0 - 1]
00A8 1204FFFE       129			LD4	R2, [R0 - 2]
00AC 1304FFFD       130			LD4	R3, [R0 - 3]
00B0 1404FFFC       131			LD4	R4, [R0 - 4]
00B4 1504FFFB       132			LD4	R5, [R0 - 5]
00B8 0F080006       133			GET	R0, REG_IRQ_SCRATCH
00BC 0FF4           134			IRET
00BE                135	
00BE                136	# CONOUT: output R0 in serial line
00BE 82FF           137	CONOUT		LI	R2, CON_CTRL
00C0 012E           138			IN	R1, R2
00C2 21F0FFFC       139			BZ	R1, CONOUT     ; ready wait
00C6 02F8           140			LI	R2, CON_DATA
00C8 002F           141			OUT	R0, R2
00CA 0FE0           142			RET
00CC                143	
00CC                144	# CONSTR: output zero terminated string in R0
00CC 93F0           145	CONSTR		MV	R3, R0
00CE 94FE           146			MV	R4, R14
00D0 10300000       147	.AGAIN		LD1	R0, [R3]
00D4 20F00007       148			BZ	R0, .DONE
00D8 0FFDFFFFFFF0   149			JAL	CONOUT
00DE 33340001       150			ADD	R3, 1
00E2 2FF0FFF5       151			BRA	.AGAIN
00E6 9EF4           152	.DONE		MV	R14, R4
00E8 0FE0           153			RET
00EA                154	
00EA                155	# CONREAD: wait for console char
00EA 0FF3           156	CONREADWAIT	WAIT
00EC 34F91004       157	CONREAD 	LI	R4, KEYBUF
00F0 11400000       158			LD1	R1, [R4]
00F4 10400001       159			LD1	R0, [R4 + 1]
00F8 2100FFF7       160			BEQ	R1, R0, CONREADWAIT
00FC 4014           161			ADD	R0, R1, R4
00FE 10000002       162			LD1	R0, [R0 + 2]	# get character
0102 31140001       163			ADD	R1, 1
0106 3118000F       164			AND	R1, KEYBUF_SIZE - 1
010A 11480000       165			ST1	[R4], R1	# store new head
010E 0FE0           166			RET
0110                167	
0110                168	# CONREADECHO: read console with echo
0110 1EFAFFFF       169	CONREADECHO	ST4	[SP - 1], R14
0114 0FFDFFFFFFE9   170			JAL	CONREAD
011A 0FFDFFFFFFCF   171			JAL	CONOUT
0120 1EF4FFFF       172			LD4	R14, [SP - 1]
0124 0FE0           173			RET
0126                174	
0126                175	#
0126                176	# utils
0126                177	#
0126                178	
0126                179	# DECNUM2: output decimal number < 100
0126 1EFAFFFF       180	DECNUM2 	ST4	[SP - 1], R14
012A 18FAFFFE       181			ST4	[SP - 2], R8
012E 31F9000A       182			LI	R1, 10
0132 82FF           183			LI	R2, 0
0134 20120005       184			BLT	R0, R1, .DONE
0138 5001           185	.AGAIN		SUB	R0, R1
013A 32240001       186			ADD	R2, 1
013E 2104FFFB       187			BLE	R1, R0, .AGAIN
0142                188	
0142                189	.DONE		# R2 = first digit
0142                190			# R0 = second digit
0142 98F0           191			MV	R8, R0
0144 30240030       192			ADD	R0, R2, '0'
0148 0FFDFFFFFFB8   193			JAL	CONOUT
014E 30840030       194			ADD	R0, R8, '0'
0152 0FFDFFFFFFB3   195			JAL	CONOUT
0158 1EF4FFFF       196			LD4	R14, [SP - 1]
015C 18F4FFFE       197			LD4	R8,  [SP - 2]
0160 0FE0           198			RET
0162                199	
0162                200	# DECNUM4: output decimal number < 10000
0162 0FF8FFFE       201	DECNUM4 	ENTER	-2
0166 1EFA0000       202			ST4	[SP + 0], R14
016A 18FA0001       203			ST4	[SP + 1], R8
016E 31F90064       204			LI	R1, 100
0172 82FF           205			LI	R2, 0
0174 20120005       206			BLT	R0, R1, .DONE
0178 5001           207	.AGAIN		SUB	R0, R1
017A 32240001       208			ADD	R2, 1
017E 2104FFFB       209			BLE	R1, R0, .AGAIN
0182 98F0           210	.DONE		MV	R8, R0
0184 90F2           211			MV	R0, R2
0186 0FFDFFFFFFCD   212			JAL	DECNUM2
018C 90F8           213			MV	R0, R8
018E 0FFDFFFFFFC9   214			JAL	DECNUM2
0194 1EF40000       215			LD4	R14, [SP + 0]
0198 18F40001       216			LD4	R8,  [SP + 1]
019C 0FF80002       217			ENTER	2
01A0 0FE0           218			RET
01A2                219	
01A2                220	# MUL10: multiply R0 * 10
01A2 300B0001       221	MUL10		SHL	R0, R0, 1
01A6 91F0           222			MV	R1, R0
01A8 300B0002       223			SHL	R0, R0, 2
01AC 4001           224			ADD	R0, R1
01AE 0FE0           225			RET
01B0                226	
01B0                227	# UPDATE BYTE (decimal < 100)
01B0                228	# R0 = POINTER, R1 = DECIMAL DIGIT, R2 = LOW FLAG
01B0 13000000       229	UPDATE_BYTE:	LD1	R3, [R0]
01B4 34F9000A       230			LI	R4, 10
01B8 85FF           231			LI	R5, 0
01BA 23420005       232			BLT	R3, R4, .READY
01BE 5334           233	.AGAIN		SUB	R3, R4
01C0 35540001       234			ADD	R5, 1
01C4 2434FFFB       235			BLE	R4, R3, .AGAIN
01C8                236			# R5 = HI, R3 = LO
01C8 22F10003       237	.READY		BNZ	R2, .UPDLOW
01CC 95F1           238			MV	R5, R1
01CE 2FF00001       239			BRA	.DONE
01D2 93F1           240	.UPDLOW 	MV	R3, R1
01D4 355B0001       241	.DONE		SHL	R5, R5, 1
01D8 91F5           242			MV	R1, R5
01DA 311B0002       243			SHL	R1, R1, 2
01DE 4115           244			ADD	R1, R5
01E0 4113           245			ADD	R1, R3
01E2 11080000       246			ST1	[R0], R1
01E6 0FE0           247			RET
01E8                248	
01E8                249	# HEXBYTE: dump byte in r0 in hex
01E8 0FF8FFFE       250	HEXBYTE 	ENTER	-2
01EC 1EFA0000       251			ST4	[SP], R14
01F0 18FA0001       252			ST4	[SP + 1], R8
01F4 98F0           253			MV	R8, R0
01F6 300C0004       254			SHR	R0, 4
01FA 3008000F       255			AND	R0, 15
01FE 100008F1       256			LD1	R0, [R0 + HTAB]
0202 0FFDFFFFFF5B   257			JAL	CONOUT
0208 90F8           258			MV	R0, R8
020A 3008000F       259			AND	R0, 15
020E 100008F1       260			LD1	R0, [R0 + HTAB]
0212 0FFDFFFFFF53   261			JAL	CONOUT
0218 1EF40000       262			LD4	R14, [SP]
021C 18F40001       263			LD4	R8,  [SP + 1]
0220 0FF80002       264			ENTER	2
0224 0FE0           265			RET
0226                266	
0226                267	# HEXFULL: dump full word r0 in hex
0226 0FF8FFFE       268	HEXFULL 	ENTER	-2
022A 1EFA0000       269			ST4	[SP], R14
022E 18FA0001       270			ST4	[SP + 1], R8
0232 98F0           271			MV	R8, R0
0234 308C0018       272			SHR	R0, R8, 24
0238 0FFDFFFFFFD5   273			JAL	HEXBYTE
023E 308C0010       274			SHR	R0, R8, 16
0242 0FFDFFFFFFD0   275			JAL	HEXBYTE
0248 308C0008       276			SHR	R0, R8, 8
024C 0FFDFFFFFFCB   277			JAL	HEXBYTE
0252 90F8           278			MV	R0, R8
0254 0FFDFFFFFFC7   279			JAL	HEXBYTE
025A 1EF40000       280			LD4	R14, [SP]
025E 18F40001       281			LD4	R8,  [SP + 1]
0262 0FF80002       282			ENTER	2
0266 0FE0           283			RET
0268                284	
0268                285	# CRC32: R0 = ptr, R1 = bytes
0268 33F9FFFF       286	CRC32		LI	R3, -1
026C 0F6CEDB88320   287			LI	R6, $EDB88320
0272 21F00016       288			BZ	R1, .DONE
0276 12000000       289	.AGAIN		LD1	R2, [R0]
027A 30040001       290			ADD	R0, 1
027E 31150001       291			SUB	R1, 1
0282 A332           292			XOR	R3, R2
0284 34F90008       293			LI	R4, 8
0288 35380001       294	.LOOP		AND	R5, R3, 1
028C 55F5           295			SUB	R5, SP, R5
028E 8556           296			AND	R5, R6
0290 333C0001       297			SHR	R3, 1
0294 A335           298			XOR	R3, R5
0296 34450001       299			SUB	R4, 1
029A 24F1FFF5       300			BNZ	R4, .LOOP
029E 21F1FFEA       301			BNZ	R1, .AGAIN
02A2 303AFFFF       302	.DONE		XOR	R0, R3, -1
02A6 0FE0           303			RET
02A8                304	
02A8                305	#
02A8                306	# exception handler
02A8                307	#
02A8                308	EXC_HANDLER	# save frame
02A8 0F09000E       309			SET	REG_EXC_SCRATCH, R0
02AC 30F91FA0       310			LI	R0, EXC_STACK - 16 * 4
02B0 110A0001       311			ST4	[R0 +  1], R1
02B4 120A0002       312			ST4	[R0 +  2], R2
02B8 130A0003       313			ST4	[R0 +  3], R3
02BC 140A0004       314			ST4	[R0 +  4], R4
02C0 150A0005       315			ST4	[R0 +  5], R5
02C4 160A0006       316			ST4	[R0 +  6], R6
02C8 170A0007       317			ST4	[R0 +  7], R7
02CC 180A0008       318			ST4	[R0 +  8], R8
02D0 190A0009       319			ST4	[R0 +  9], R9
02D4 1A0A000A       320			ST4	[R0 + 10], R10
02D8 1B0A000B       321			ST4	[R0 + 11], R11
02DC 1C0A000C       322			ST4	[R0 + 12], R12
02E0 1D0A000D       323			ST4	[R0 + 13], R13
02E4 1E0A000E       324			ST4	[R0 + 14], R14
02E8 1F0A000F       325			ST4	[R0 + 15], SP
02EC 9FF0           326			MV	SP, R0
02EE 0F08000E       327			GET	R0, REG_EXC_SCRATCH
02F2 10FA0000       328			ST4	[SP], R0
02F6                329	
02F6 30F90944       330			LI	R0, EXC_HEADER
02FA 0FFDFFFFFEE6   331			JAL	CONSTR
0300 0F08000C       332			GET	R0, REG_EXC_CODE
0304 0FFDFFFFFF8E   333			JAL	HEXFULL
030A 30F90950       334			LI	R0, EXC_MIDDLE
030E 0FFDFFFFFEDC   335			JAL	CONSTR
0314 0F08000F       336			GET	R0, REG_EXC_SAVE
0318 0FFDFFFFFF84   337			JAL	HEXFULL
031E 30F90955       338			LI	R0, EXC_FOOTER
0322 0FFDFFFFFED2   339			JAL	CONSTR
0328                340	
0328                341			# dump registers
0328 88FF           342			LI	R8, 0
032A 99FF           343			MV	R9, SP
032C 3AF91FE0       344			LI	R10, EXC_STACK
0330                345	.LOOP		# dump register
0330 30F90020       346			LI	R0, ' '
0334 31880003       347			AND	R1, R8, 3
0338 21F10002       348			BNZ	R1, .NOLF
033C 30F9000A       349			LI	R0, LF
0340 0FFDFFFFFEBC   350	.NOLF		JAL	CONOUT
0346 30F90052       351			LI	R0, 'R'
034A 0FFDFFFFFEB7   352			JAL	CONOUT
0350 90F8           353			MV	R0, R8
0352 0FFDFFFFFF48   354			JAL	HEXBYTE
0358 30F9003D       355			LI	R0, '='
035C 0FFDFFFFFEAE   356			JAL	CONOUT
0362 10940000       357			LD4	R0, [R9]
0366 0FFDFFFFFF5D   358			JAL	HEXFULL
036C                359	
036C                360			# next
036C 38840001       361			ADD	R8, 1
0370 39940004       362			ADD	R9, 4
0374 29A2FFDC       363			BLT	R9, R10, .LOOP
0378                364	
0378                365			# notify debugger
0378 30F900FF       366			LI	R0, DEBUG_IO
037C 000F           367			OUT	R0, R0
037E                368	
037E                369			# wait forever
037E 0FF3           370	.HALT		WAIT
0380 2FF0FFFD       371			BRA	.HALT
0384                372	
0384                373	#
0384                374	# monitor
0384                375	#
0384                376	MONITOR 	# zero sysvars area
0384 30F91000       377			LI	R0, SYSVARS_START
0388 31F91020       378			LI	R1, SYSVARS_END
038C 82FF           379			LI	R2, 0
038E 120A0000       380	.ZEROVARS	ST4	[R0], R2
0392 30040004       381			ADD	R0, 4
0396 2012FFFA       382			BLT	R0, R1, .ZEROVARS
039A                383	
039A                384			# init serial console
039A                385			;LD	 A, :RTS_LOW
039A                386			;OUT	 (:IODEV_CONSOLE), A
039A                387	
039A                388			# enable irqs
039A 30F9FFFF       389			LI	R0, -1
039E 0F090004       390			SET	REG_IRQ_MASK, R0
03A2                391	
03A2                392			# say hello
03A2 30F9082E       393			LI	R0, HELLO
03A6 0FFDFFFFFE90   394			JAL	CONSTR
03AC                395	
03AC                396			# output menu
03AC 30F90840       397	MAINMENU:	LI	R0, MENU
03B0 0FFDFFFFFE8B   398			JAL	CONSTR
03B6                399	
03B6                400			# read option
03B6 0FFDFFFFFEAA   401			JAL	CONREADECHO
03BC                402	
03BC                403			# check option
03BC 31050030       404			SUB	R1, R0, '0'
03C0 21F0FE1E       405			BZ	R1, RESET
03C4 31050039       406			SUB	R1, R0, '9'
03C8 21F00017       407			BZ	R1, .ILLEGAL
03CC 31050031       408			SUB	R1, R0, '1'
03D0 21F0002A       409			BZ	R1, DATE
03D4 31050032       410			SUB	R1, R0, '2'
03D8 21F00148       411			BZ	R1, MEMMON
03DC 31050034       412			SUB	R1, R0, '4'
03E0 21F0000C       413			BZ	R1, BENCH
03E4 3105001B       414			SUB	R1, R0, ESC
03E8 21F1FFE0       415			BNZ	R1, MAINMENU
03EC                416	
03EC                417			# ouput space to disable esc
03EC 30F90901       418			LI	R0, ESCOFF
03F0 0FFDFFFFFE6B   419			JAL	CONSTR
03F6 2FF0FFD9       420			BRA	MAINMENU
03FA                421	
03FA 0FF0           422	.ILLEGAL	ILLEGAL
03FC                423	
03FC                424	#
03FC                425	# BENCH
03FC                426	#
03FC 30F90961       427	BENCH		LI	R0, BENCH_HEADER
0400 0FFDFFFFFE63   428			JAL	CONSTR
0406 38F90064       429			LI	R8, 100
040A 80FF           430	.LOOP		LI	R0, 0
040C 31F90040       431			LI	R1, 64
0410 0FFDFFFFFF29   432			JAL	CRC32
0416 38850001       433			SUB	R8, 1
041A 28F1FFF6       434			BNZ	R8, .LOOP
041E 0FFDFFFFFF01   435			JAL	HEXFULL
0424 2FF0FFC2       436			BRA	MAINMENU
0428                437	
0428                438	#
0428                439	# GET/SET DATE
0428                440	#
0428                441	DATE		# request date
0428 80FF           442			LI	R0, 0
042A 1008101E       443			ST1	[R0 + DATE_READY], R0
042E                444	
042E                445			# request date
042E 30F90002       446	.POLL		LI	R0, RTC_CTRL
0432 000E           447			IN	R0, R0
0434 20F0FFFB       448			BZ	R0, .POLL
0438 31F90003       449			LI	R1, RTC_DATA
043C 80FF           450			LI	R0, 0
043E 001F           451			OUT	R0, R1
0440                452	
0440                453			# wait response
0440 80FF           454	.AGAIN		LI	R0, 0
0442 1000101E       455			LD1	R0, [R0 + DATE_READY]
0446 20F10003       456			BNZ	R0, .READY
044A 0FF3           457			WAIT
044C 2FF0FFF8       458			BRA	.AGAIN
0450                459	
0450                460			# output date
0450 89FF           461	.READY		LI	R9, 0		# cursor
0452 30F9000A       462			LI	R0, LF
0456 0FFDFFFFFE31   463			JAL	CONOUT
045C 30F908A1       464	.REFRESH	LI	R0, DATE_HEADER
0460 0FFDFFFFFE33   465			JAL	CONSTR
0466 38F91016       466			LI	R8, DATE_IO
046A 10820000       467			LD2	R0, [R8]	# year
046E 0FFDFFFFFE77   468			JAL	DECNUM4
0474 10800002       469			LD1	R0, [R8 + 2]	# month
0478 0FFDFFFFFE54   470			JAL	DECNUM2
047E 10800003       471			LD1	R0, [R8 + 3]	# day
0482 0FFDFFFFFE4F   472			JAL	DECNUM2
0488 30F90020       473			LI	R0, ' '
048C 0FFDFFFFFE16   474			JAL	CONOUT
0492 10800004       475			LD1	R0, [R8 + 4]	# day of week
0496 30040030       476			ADD	R0, '0'
049A 0FFDFFFFFE0F   477			JAL	CONOUT
04A0 30F90020       478			LI	R0, ' '
04A4 0FFDFFFFFE0A   479			JAL	CONOUT
04AA 10800005       480			LD1	R0, [R8 + 5]	# hour
04AE 0FFDFFFFFE39   481			JAL	DECNUM2
04B4 10800006       482			LD1	R0, [R8 + 6]	# minute
04B8 0FFDFFFFFE34   483			JAL	DECNUM2
04BE 10800007       484			LD1	R0, [R8 + 7]	# second
04C2 0FFDFFFFFE2F   485			JAL	DECNUM2
04C8 30F908A5       486			LI	R0, DATE_FOOTER
04CC 0FFDFFFFFDFD   487			JAL	CONSTR
04D2                488	
04D2                489			# set cursor pos
04D2 109008D2       490			LD1	R0, [R9 + DATE_COLS]
04D6 0FFDFFFFFE25   491			JAL	DECNUM2
04DC 30F90047       492			LI	R0, 'G'
04E0 0FFDFFFFFDEC   493			JAL CONOUT
04E6                494	
04E6                495			# readcmd
04E6 0FFDFFFFFE00   496	.READCMD	JAL	CONREAD
04EC 31050058       497			SUB	R1, R0, 'X'
04F0 21F0FF5C       498			BZ	R1, MAINMENU
04F4 31050078       499			SUB	R1, R0, 'x'
04F8 21F0FF58       500			BZ	R1, MAINMENU
04FC 3105001B       501			SUB	R1, R0, ESC
0500 21F0FF54       502			BZ	R1, MAINMENU
0504 31050009       503			SUB	R1, R0, TAB
0508 21F00088       504			BZ	R1, .NEXT
050C 31050020       505			SUB	R1, R0, ' '
0510 21F00084       506			BZ	R1, .NEXT
0514 3105000A       507			SUB	R1, R0, LF
0518 21F00089       508			BZ	R1, .CHANGE
051C 3105000D       509			SUB	R1, R0, CR
0520 21F00085       510			BZ	R1, .CHANGE
0524 31050039       511			SUB	R1, R0, '9'
0528 2F13FFDD       512			BLTI	SP, R1, .READCMD
052C 31050030       513			SUB	R1, R0, '0'
0530 21F3FFD9       514			BLTI	R1, SP, .READCMD
0534                515	
0534                516			# update state with new digit (R1)
0534 32F91016       517			LI	R2, DATE_IO
0538 30F90008       518			LI	R0, 8
053C 29010004       519			BNE	R9, R0, .NODOW
0540 11280004       520			ST1	[R2 + 4], R1
0544 2FF0006A       521			BRA	.NEXT
0548 29020010       522	.NODOW		BLT	R9, R0, .NOTIME
054C 30950009       523			SUB	R0, R9, 9
0550 300C0001       524			SHR	R0, 1
0554 4002           525			ADD	R0, R2
0556 30040005       526			ADD	R0, 5
055A 32980001       527			AND	R2, R9, 1
055E 322A0001       528			XOR	R2, 1
0562 0FFDFFFFFE24   529			JAL	UPDATE_BYTE
0568 2FF00058       530			BRA	.NEXT
056C 30F90004       531	.NOTIME 	LI	R0, 4
0570 2902000D       532			BLT	R9, R0, .YEAR
0574 5090           533			SUB	R0, R9, R0
0576 300C0001       534			SHR	R0, 1
057A 4020           535			ADD	R0, R2, R0
057C 30040002       536			ADD	R0, 2
0580 32980001       537			AND	R2, R9, 1
0584 0FFDFFFFFE13   538			JAL	UPDATE_BYTE
058A 2FF00047       539			BRA	.NEXT
058E 10220000       540	.YEAR		LD2	R0, [R2]
0592 37F903E8       541			LI	R7, 1000
0596 83FF           542			LI	R3, 0
0598 20720005       543			BLT	R0, R7, .P1000
059C 5007           544	.A1000		SUB	R0, R7
059E 33340001       545			ADD	R3, 1
05A2 2704FFFB       546			BLE	R7, R0, .A1000
05A6 37F90064       547	.P1000		LI	R7, 100
05AA 84FF           548			LI	R4, 0
05AC 20720005       549			BLT	R0, R7, .P100
05B0 5007           550	.A100		SUB	R0, R7
05B2 34440001       551			ADD	R4, 1
05B6 2704FFFB       552			BLE	R7, R0, .A100
05BA 37F9000A       553	.P100		LI	R7, 10
05BE 85FF           554			LI	R5, 0
05C0 20720005       555			BLT	R0, R7, .UPDY
05C4 5007           556	.A10		SUB	R0, R7
05C6 35540001       557			ADD	R5, 1
05CA 2704FFFB       558			BLE	R7, R0, .A10
05CE 96F9           559	.UPDY		MV	R6, R9
05D0 26F10003       560			BNZ	R6, .NOUPD0
05D4 93F1           561			MV	R3, R1
05D6 2FF0000F       562			BRA	.YBUILD
05DA 36650001       563	.NOUPD0 	SUB	R6, 1
05DE 26F10003       564			BNZ	R6, .NOUPD1
05E2 94F1           565			MV	R4, R1
05E4 2FF00008       566			BRA	.YBUILD
05E8 36650001       567	.NOUPD1 	SUB	R6, 1
05EC 26F10003       568			BNZ	R6, .NOUPD2
05F0 95F1           569			MV	R5, R1
05F2 2FF00001       570			BRA	.YBUILD
05F6 90F1           571	.NOUPD2 	MV	R0, R1
05F8 96F0           572	.YBUILD 	MV	R6, R0
05FA 90F3           573			MV	R0, R3
05FC 0FFDFFFFFDD0   574			JAL	MUL10
0602 4004           575			ADD	R0, R4
0604 0FFDFFFFFDCC   576			JAL	MUL10
060A 4005           577			ADD	R0, R5
060C 0FFDFFFFFDC8   578			JAL	MUL10
0612 4006           579			ADD	R0, R6
0614 10290000       580			ST2	[R2], R0
0618 2FF00000       581			BRA	.NEXT
061C                582	
061C                583	.NEXT		# inc cursor
061C 39940001       584			ADD	R9, 1
0620 30F9000F       585			LI	R0, 15
0624 2902FF1A       586			BLT	R9, R0, .REFRESH
0628 89FF           587			LI	R9, 0
062A 2FF0FF17       588			BRA	.REFRESH
062E                589	
062E 30F90002       590	.CHANGE 	LI	R0, RTC_CTRL
0632 000E           591			IN	R0, R0
0634 20F0FFFB       592			BZ	R0, .CHANGE
0638 31F90003       593			LI	R1, RTC_DATA
063C 00F8           594			LI	R0, 1	# write cmd
063E 001F           595			OUT	R0, R1
0640 31F90004       596			LI	R1, RTC_WRITE
0644 32F91016       597			LI	R2, DATE_IO
0648 33F90008       598			LI	R3, 8
064C 10200000       599	.WRITE		LD1	R0, [R2]
0650 32240001       600			ADD	R2, 1
0654 33350001       601			SUB	R3, 1
0658 001F           602			OUT	R0, R1
065A 23F1FFF7       603			BNZ	R3, .WRITE
065E 30F908E1       604			LI	R0, DATE_WRITTEN
0662 0FFDFFFFFD32   605			JAL	CONSTR
0668 2FF0FEA0       606			BRA	MAINMENU
066C                607	
066C                608	#
066C                609	# Memory monitor
066C                610	#
066C 8DFF           611	MEMMON		LI	R13, 0	# base addr
066E 3CF90004       612			LI	R12, 4	# mem lines
0672 1DDA1000       613			ST4	[R13 + MMON_VALUE], R13
0676 30F90904       614	.REFRESH	LI	R0, MMON_HEADER
067A 0FFDFFFFFD26   615			JAL	CONSTR
0680 98FD           616			MV	R8, R13
0682 99FC           617			MV	R9, R12
0684                618	.NEXTLINE	# show addr
0684 90F8           619			MV	R0, R8
0686 0FFDFFFFFDCD   620			JAL	HEXFULL
068C                621	
068C                622			# hex dump
068C 3AF90008       623			LI	R10, MLINBYTES
0690 9BF8           624			MV	R11, R8
0692 30F90020       625	.HEXDUMP	LI	R0, ' '
0696 0FFDFFFFFD11   626			JAL	CONOUT
069C 10B00000       627			LD1	R0, [R11]
06A0 0FFDFFFFFDA1   628			JAL	HEXBYTE
06A6 3BB40001       629			ADD	R11, 1
06AA 3AA50001       630			SUB	R10, 1
06AE 2AF1FFF0       631			BNZ	R10, .HEXDUMP
06B2                632	
06B2                633			# ascii dump
06B2 30F90020       634			LI	R0, ' '
06B6 0FFDFFFFFD01   635			JAL	CONOUT
06BC 3AF90008       636			LI	R10, MLINBYTES
06C0 10800000       637	.ASCIIDUMP	LD1	R0, [R8]
06C4 31F90020       638			LI	R1, ' '
06C8 20120004       639			BLT	R0, R1, .MKPOINT
06CC 31F90080       640			LI	R1, 128
06D0 20120002       641			BLT	R0, R1, .READY
06D4 30F9002E       642	.MKPOINT	LI	R0, '.'
06D8 0FFDFFFFFCF0   643	.READY		JAL	CONOUT
06DE 38840001       644			ADD	R8, 1
06E2 3AA50001       645			SUB	R10, 1
06E6 2AF1FFEB       646			BNZ	R10, .ASCIIDUMP
06EA                647	
06EA                648			# end of line
06EA 30F9000A       649			LI	R0, LF
06EE 0FFDFFFFFCE5   650			JAL	CONOUT
06F4 39950001       651			SUB	R9, 1
06F8 29F1FFC4       652			BNZ	R9, .NEXTLINE
06FC                653	
06FC                654			# dump value
06FC 30F9000D       655	.PARTIAL	LI	R0, CR
0700 0FFDFFFFFCDC   656			JAL	CONOUT
0706 30F91000       657			LI	R0, MMON_VALUE
070A 10040000       658			LD4	R0, [R0]
070E 0FFDFFFFFD89   659			JAL	HEXFULL
0714                660	
0714                661			# readcmd
0714 0FFDFFFFFCE9   662	.READCMD	JAL	CONREAD
071A 31050058       663			SUB	R1, R0, 'X'
071E 21F0FE45       664			BZ	R1, MAINMENU
0722 31050078       665			SUB	R1, R0, 'x'
0726 21F0FE41       666			BZ	R1, MAINMENU
072A 3105001B       667			SUB	R1, R0, ESC
072E 21F0FE3D       668			BZ	R1, MAINMENU
0732 31050049       669			SUB	R1, R0, 'I'
0736 21F00053       670			BZ	R1, .INCLINE
073A 31050069       671			SUB	R1, R0, 'i'
073E 21F0004F       672			BZ	R1, .INCLINE
0742 3105007A       673			SUB	R1, R0, 'z'
0746 21F0004F       674			BZ	R1, .ZEROVAL
074A 3105005A       675			SUB	R1, R0, 'Z'
074E 21F0004B       676			BZ	R1, .ZEROVAL
0752 3105000A       677			SUB	R1, R0, LF
0756 21F0004E       678			BZ	R1, .GOTO
075A 3105000D       679			SUB	R1, R0, CR
075E 21F0004A       680			BZ	R1, .GOTO
0762 31050008       681			SUB	R1, R0, BS
0766 21F0004C       682			BZ	R1, .BACK
076A 3105007F       683			SUB	R1, R0, DEL
076E 21F00048       684			BZ	R1, .BACK
0772 31050050       685			SUB	R1, R0, 'P'
0776 21F0004E       686			BZ	R1, .POKE
077A 31050070       687			SUB	R1, R0, 'p'
077E 21F0004A       688			BZ	R1, .POKE
0782 3105004B       689			SUB	R1, R0, 'K'
0786 21F00046       690			BZ	R1, .POKE
078A 3105006B       691			SUB	R1, R0, 'k'
078E 21F00042       692			BZ	R1, .POKE
0792 31050009       693			SUB	R1, R0, TAB
0796 21F00046       694			BZ	R1, .NEXT
079A                695	
079A                696			# hex digit ?
079A 31F90030       697			LI	R1, '0'
079E 2012FFB9       698			BLT	R0, R1, .READCMD
07A2 32F90039       699			LI	R2, '9'
07A6 22020003       700			BLT	R2, R0, .NODEC
07AA 5001           701			SUB	R0, R1
07AC 2FF0000D       702			BRA	.ADDVAL
07B0 30090020       703	.NODEC		OR	R0, $20 # lowercase
07B4 31F90061       704			LI	R1, 'a'
07B8 2012FFAC       705			BLT	R0, R1, .READCMD
07BC 32F90066       706			LI	R2, 'f'
07C0 2202FFA8       707			BLT	R2, R0, .READCMD
07C4 5001           708			SUB	R0, R1
07C6 3004000A       709			ADD	R0, 10
07CA 31F91000       710	.ADDVAL 	LI	R1, MMON_VALUE
07CE 12140000       711			LD4	R2, [R1]
07D2 322B0004       712			SHL	R2, 4
07D6 9220           713			OR	R2, R0
07D8 121A0000       714			ST4	[R1], R2
07DC 2FF0FF8E       715			BRA	.PARTIAL
07E0                716	
07E0 3CC40001       717	.INCLINE	ADD	R12, 1
07E4 2FF0FF47       718			BRA	.REFRESH
07E8 31F91000       719	.ZEROVAL	LI	R1, MMON_VALUE
07EC 80FF           720			LI	R0, 0
07EE 101A0000       721			ST4	[R1], R0
07F2 2FF0FF83       722			BRA	.PARTIAL
07F6 31F91000       723	.GOTO		LI	R1, MMON_VALUE
07FA 1D140000       724			LD4	R13, [R1]
07FE 2FF0FF3A       725			BRA	.REFRESH
0802 31F91000       726	.BACK		LI	R1, MMON_VALUE
0806 10140000       727			LD4	R0, [R1]
080A 300C0004       728			SHR	R0, 4
080E 101A0000       729			ST4	[R1], R0
0812 2FF0FF73       730			BRA	.PARTIAL
0816 31F91000       731	.POKE		LI	R1, MMON_VALUE
081A 10140000       732			LD4	R0, [R1]
081E 10D80000       733			ST1	[R13], R0
0822 2FF0FF28       734			BRA	.REFRESH
0826 3DD40001       735	.NEXT		ADD	R13, 1
082A 2FF0FF24       736			BRA	.REFRESH
082E                737	
082E                738	#
082E                739	# string area
082E                740	#
082E 0A454F4E204B   741	HELLO		.BYTE	LF, "EON KERNEL 0.0.0", 0
0834 45524E454C20
083A 302E302E3000
0840 0A             742	MENU		.BYTE	LF
0841 312E20474554   743			.BYTE	"1. GET/SET DATE   4. BENCHMARK", LF
0847 2F5345542044
084D 415445202020
0853 342E2042454E
0859 43484D41524B
085F 0A          
0860 322E204D454D   744			.BYTE	"2. MEMORY MONITOR 9. ILLEGAL", LF
0866 4F5259204D4F
086C 4E49544F5220
0872 392E20494C4C
0878 4547414C0A  
087D 332E20444953   745			.BYTE	"3. DISK MONITOR   0. RESET", LF
0883 4B204D4F4E49
0889 544F52202020
088F 302E20524553
0895 45540A      
0898 4F5054494F4E   746			.BYTE	"OPTION? ", 0
089E 3F2000      
08A1 0D202000       747	DATE_HEADER	.BYTE	CR, "  ", 0
08A5 20285441422F   748	DATE_FOOTER	.BYTE	" (TAB/SPACE=NEXT, ESC/X=EXIT ENTER=UPDATE)", ESC, "[", 0
08AB 53504143453D
08B1 4E4558542C20
08B7 4553432F583D
08BD 455849542045
08C3 4E5445523D55
08C9 504441544529
08CF 1B5B00      
08D2 030405060708   749	DATE_COLS	.BYTE	3, 4, 5, 6, 7, 8, 9, 10, 12, 14, 15, 16, 17, 18, 19
08D8 090A0C0E0F10
08DE 111213      
08E1 0A4441544520   750	DATE_WRITTEN	.BYTE	LF, "DATE WRITTEN !", 0
08E7 575249545445
08ED 4E202100    
08F1 303132333435   751	HTAB		.BYTE	"0123456789ABCDEF"
08F7 363738394142
08FD 43444546    
0901 5B4B00         752	ESCOFF		.BYTE	"[K", 0
0904 0A2028455343   753	MMON_HEADER	.BYTE	LF, " (ESC/X=EXIT ENTER=GOTO TAB=NEXT Z=ZERO I=INC LINES P/K=POKE)", LF, 0
090A 2F583D455849
0910 5420454E5445
0916 523D474F544F
091C 205441423D4E
0922 455854205A3D
0928 5A45524F2049
092E 3D494E43204C
0934 494E45532050
093A 2F4B3D504F4B
0940 45290A00    
0944 0A4558434550   754	EXC_HEADER	.BYTE	LF, "EXCEPTION ", 0
094A 54494F4E2000
0950 2041542000     755	EXC_MIDDLE	.BYTE	" AT ", 0
0955 205749544820   756	EXC_FOOTER	.BYTE	" WITH REGS:", 0
095B 524547533A00
0961 0A4352433332   757	BENCH_HEADER	.BYTE	LF, "CRC32 FIRST 64 ROM BYTES 100 TIMES: ", 0
0967 204649525354
096D 20363420524F
0973 4D2042595445
0979 532031303020
097F 54494D45533A
0985 2000        
#######################     4 passes. global/local labels (MAX   256):    69 /    59
